@{
    ViewBag.Title = "Edit " + ViewBag.DataTypeM;
}

@using System.Web.Optimization;

@model OHC.EAMI.WebUI.Models.EAMIMasterDataModel


@using (Html.BeginForm("EditmasterData", "Administration", FormMethod.Post, new { @class = "form-horizontal", role = "form", @ID = "frmEditMasterData", autocomplete = "off" }))
{
    @Html.AntiForgeryToken()

    <div class="panel panel-default">
        @if (ViewBag.DataTypeO != "S")
        {
             <div class="panel-heading" style="background-color: #17315a; color: white;">
                <h3 class="panel-title"><i class="fa fa-edit">&nbsp;</i>Edit @ViewBag.DataTypeS</h3>
            </div>
        }


    <div class="panel-body">
        <div id="dvEditErrorHolder"></div>
        <div class="form-group">
            <div class="col-xs-4">
                @Html.HiddenFor(input => input.DataType)
                @Html.HiddenFor(input => input.ID)
                @Html.HiddenFor(input => input.OriginalCode)
                <label for="Code" class="control-label">Code</label><span style="color:red;font-weight:bold">&nbsp;*</span>
                @Html.TextBoxFor(input => input.Code, new { @class = "form-control input-sm", maxlength = "200" })
            </div>
        </div>
        <div class="form-group">
            <div class="col-xs-4">
                <label for="Name" class="control-label">Name</label><span style="color:red;font-weight:bold">&nbsp;*</span>
                @Html.TextBoxFor(input => input.Name, new { @class = "form-control input-sm", maxlength = "200" })
            </div>
        </div>

        @if (ViewBag.DataTypeO == "S")
        {
            <div class="form-group">
                <div class="col-xs-4">
                    <label for="Name" class="control-label">Department Name</label><span style="color:red;font-weight:bold">&nbsp;*</span>
                    @Html.TextBoxFor(input => input.DepartmentName, new { @class = "form-control input-sm", maxlength = "50" })
                </div>
            </div>
            <div class="form-group">
                <div class="col-xs-4">
                    <label for="Name" class="control-label">Organization Code</label><span style="color:red;font-weight:bold">&nbsp;*</span>
                    @Html.TextBoxFor(input => input.OrganizationCode, new { @class = "form-control input-sm", maxlength = "10" })
                </div>
            </div>
            <div class="form-group">
                <div class="col-xs-4">
                    <label for="Name" class="control-label">Address Line 1</label><span style="color:red;font-weight:bold">&nbsp;*</span>
                    @Html.TextBoxFor(input => input.RADepartmentAddrLine, new { @class = "form-control input-sm", maxlength = "100" })
                </div>
            </div>
            <div class="form-group">
                <div class="col-xs-4">
                    <label for="Name" class="control-label">Address Line 2</label><span style="color:red;font-weight:bold">&nbsp;*</span>
                    @Html.TextBoxFor(input => input.RADepartmentAddrCSZ, new { @class = "form-control input-sm", maxlength = "100" })
                </div>
            </div>
            <div class="form-group">
                <div class="col-xs-4">
                    <label for="Name" class="control-label">Inquiry Phone Number</label><span style="color:red;font-weight:bold">&nbsp;*</span>
                    @Html.TextBoxFor(input => input.RAInquiryPhNo, new { @class = "form-control input-sm", maxlength = "14" })
                </div>
            </div>
            <div class="form-group">
                <div class="col-xs-4">
                    <label for="Name" class="control-label">FEIN Number</label><span style="color:red;font-weight:bold">&nbsp;*</span>
                    @Html.TextBoxFor(input => input.FEIN_Number, new { @class = "form-control input-sm", maxlength = "12" })
                </div>
            </div>
            <div class="form-group">
                <div class="col-xs-4">
                    <label for="Name" class="control-label">Maximum Payment Record Amount</label><span style="color:red;font-weight:bold">&nbsp;*</span>
                    @Html.TextBoxFor(input => input.MaxPmtRecAmt, new { @class = "form-control input-sm", maxlength = "12", onkeypress = "return isNumberKey(event)" })
                </div>
            </div>
            <div class="form-group">
                <div class="col-xs-4">
                    <label for="Name" class="control-label">Maximum Payment Record Per Transaction</label><span style="color:red;font-weight:bold">&nbsp;*</span>
                    @Html.TextBoxFor(input => input.MaxPmtRecPerTran, new { @class = "form-control input-sm", maxlength = "10", onkeypress = "return isNumberKey(event)" })
                </div>
            </div>
            <div class="form-group">
                <div class="col-xs-4">
                    <label for="Name" class="control-label">Maximum Funding Detail Per Payment Record</label><span style="color:red;font-weight:bold">&nbsp;*</span>
                    @Html.TextBoxFor(input => input.MaxFundingDtlPerPmtRec, new { @class = "form-control input-sm", maxlength = "10", onkeypress = "return isNumberKey(event)" })
                </div>
            </div>
            <div class="form-group">
                <div class="col-xs-4">
                    <label for="Name" class="control-label">Trace Incoming Payment Data</label><span style="color:red;font-weight:bold">&nbsp;*</span>
                    @Html.TextBoxFor(input => input.TraceIncomingPmtData, new { @class = "form-control input-sm", maxlength = "10" })
                </div>
            </div>
            <div class="form-group">
                <div class="col-xs-4">
                    <label for="Name" class="control-label">Title Transfer Letter</label><span style="color:red;font-weight:bold">&nbsp;*</span>
                    @Html.TextBoxFor(input => input.TitleTransferLetter, new { @class = "form-control input-sm", maxlength = "50" })
                </div>
            </div>
        }
        <div class="form-group" id="dvAssociatedData">
            <div class="col-xs-3">
                @Html.Label("Permissions(s)", "Associated Permissions", new { @class = "control-label" })
                @for (int idx = 0; idx < Model.AssociatedData.Count; idx++)
                {
                    <div style="">
                        @Html.HiddenFor(x => Model.AssociatedData[idx].ID)
                        @Html.CheckBoxFor(x => Model.AssociatedData[idx].IsSelected)
                        @Html.DisplayFor(x => Model.AssociatedData[idx].Code)
                    </div>
                }
            </div>
        </div>
        <div class="form-group" id="dvValidateFundingSource">
            <div class="col-xs-4">
                @Html.CheckBoxFor(m => m.ValidateFundingSource, new { id = "chkIsValidateFundingSourceActive" })
                <label for="ValidateFundingSource" class="control-label">Is Validate Funding Source Active ?</label>
            </div>
        </div>
        <div class="form-group" id="dvStatus">
            <div class="col-xs-4">
                @Html.CheckBoxFor(m => m.IsActive, new { id = "chkIsDataActive" })
                <label for="IsActive" class="control-label">Is @ViewBag.DataTypeS Active ?</label>
            </div>
        </div>
        <div style="clear:both"></div>
        <div class="form-group" style="margin-top:20px;">
            <div class="col-xs-4">
                <button type="button" onclick="return SaveMasterData();" class="btn btn-dhcs-secondary btn-sm" id="btnEditMasterData">Update </button>&nbsp;
                <button type="button" onclick="return EditMasterDataReset();" class="btn btn-dhcs-secondary btn-sm" id="btnEditMasterDataReset">Reset</button>&nbsp;
                <button type="button" onclick="return EditMasterDataCancel();" class="btn btn-dhcs-secondary btn-sm" id="btnEditMasterDataCancel" style="float:none">Back</button>&nbsp;
            </div>
        </div>
    </div>
</div>
}

        <script type="text/javascript">

    var frmValidator = $("#frmEditMasterData").validate({
        errorElement: 'span',
        ignore: ".ignore",
        rules: {
            Code: {
                required: true,
            },
            Name: {
                required: true,
            },
            DepartmentName: {
                required: true,
            },
            OrganizationCode: {
                required: true,
            },
            RADepartmentAddrLine: {
                required: true,
            },
            RADepartmentAddrCSZ: {
                required: true,
            },
            RAInquiryPhNo: {
                required: true,
            },
            FEIN_Number: {
                required: true,
            },
            MaxPmtRecAmt: {
                required: true,
            },
            MaxPmtRecPerTran: {
                required: true,
            },
            MaxFundingDtlPerPmtRec: {
                required: true,
            },
            TraceIncomingPmtData: {
                required: true,
            },
            
        },

        // Messages for form validation
        messages: {
            Code: {
                required: 'Please enter code',
            },
            Name: {
                required: 'Please enter name',
            },
            DepartmentName: {
                required: 'Please enter Department Name',
            },
            OrganizationCode: {
                required: 'Please enter Organization Code',
            },
            RADepartmentAddrLine: {
                required: 'Please enter Addres Line 1',
            },
            RADepartmentAddrCSZ: {
                required: 'Please enter Addres Line 2',
            },
            RAInquiryPhNo: {
                required: 'Please enter Inquiry Phone Number',
            },
            FEIN_Number: {
                required: 'Please enter FEIN Number',
            },
            MaxPmtRecAmt: {
                required: 'Please enter Max Payment Record Amount',
            },
            MaxPmtRecPerTran: {
                required: 'Please enter Max Payment Record Per Transaction',
            },
            MaxFundingDtlPerPmtRec: {
                required: 'Please enter Max Funding Detail Payment Record',
            },
            TraceIncomingPmtData: {
                required: 'Please enter Trace Incoming Payment Data',
            },
            
            

        },
        errorPlacement: function (error, element) {
            error.insertAfter(element);
        }

    });

    function isNumberKey(evt) {
        var charCode = (evt.which) ? evt.which : event.keyCode;
        console.log('keyCode =', charCode);
        if ((charCode < 48 || charCode > 57)) {
            if (charCode == 8 || charCode == 0) {
                return true;
            }
            else {
                return false;
            }
        }
    }  

    function SaveMasterData() {

        HideFormStatusMessage('frmEditMasterData', 'dvEditErrorHolder');
        var isSuccess = false;
        if (!ajaxValidateEditMasterData()) {
            //alert('err');
            return false;
        }
        else {
            if ($.trim($('#OriginalCode').val().toLowerCase()) != $.trim($('#Code').val().toLowerCase())) {

                var isCodeValid = false;
                try {
                    var response = getUrlJsonSync(getEAMIAbsoluteUrl('~/Administration/CheckIfMasterDataExists?datatype=' + DataTypeS + '&dataTypecode=' +
                        $('#Code').val()));

                    if (response.valid == 'OK') {
                        if (response.data == 'True') {
                            isCodeValid = true;
                        }
                    }
                }
                catch (e) { }

                if (!isCodeValid) {
                    setFormStatusMessage('frmEditMasterData', 'dvEditErrorHolder', false, DataTypeS + ' already registered', 4);
                    return false;
                }
            }

            $.ajax({
                url: getEAMIAbsoluteUrl('~/Administration/EditMasterData2'),
                type: 'POST',
                datatype: "html",
                cache: false,
                data: $("#frmEditMasterData").serialize(),
                success: function (data) {
                    var message = "";
                    var status = "";
                    if (data != null) {
                        //undefined in case of some exception. for ex: Session override error
                        if (data.message == undefined || data.status == undefined) {
                            message = "An error occured. Please refresh the screen and try again.";
                            status = false;
                        }
                        else {
                            message = data.message;
                            status = data.status;
                        }

                        wasItAAsuccess = (status == "OK");

                        if (wasItAAsuccess) {

                            setFormStatusMessage('frmEditMasterData', 'dvEditErrorHolder', true, DataTypeS + ' successfully updated', 4);
                        }
                        else {
                            setFormStatusMessage('frmEditMasterData', 'dvEditErrorHolder', false, message, 5);
                        }
                    }
                    else { setFormStatusMessage('frmEditMasterData', 'dvEditErrorHolder', false, message, 5); }
                },
                error: function () {
                    setFormStatusMessage('frmEditMasterData', 'dvEditErrorHolder', false, 'An error occured', 5);

                }
            });
        }

        return false;
    }

    function ajaxValidateEditMasterData() {
        return frmValidator.form();
    }

    function EditMasterDataReset() {
        HideFormStatusMessage('frmEditMasterData', 'dvEditErrorHolder');
        if (DataTypeS == "System") {
            url = getEAMIAbsoluteUrl('~/Administration/EditSystemsInfo?systemId=' + currentMasterDataID);
            $('#dvtab1').load(url);
        }
        else {
            url = getEAMIAbsoluteUrl('~/Administration/EditMasterData?masterDataID=' + currentMasterDataID + '&datatype=' + DataTypeS);
            $('#dvActionArea').load(url);
        }
        return false;
    }

    function EditMasterDataCancel() {

                    // Start Loading... Animation
                    $('#header').css("display", "block");
                    $('#divLoadingAnimation').css("display", "block");
                    EAMIShowAjaxLoadingContent('divLoadingAnimation_Inner');

                    $("#dvActionArea").slideUp(250, function () {
                        // Animation complete.
                        //EAMIShowAjaxLoadingContent('dvgridArea');
                        $('#dvMainArea').slideDown(250);
                        //$('#dvActionArea').html('');
                        $('#dvgridArea').load(getEAMIAbsoluteUrl('~/Administration/ManageMasterDataList?datatype=' + DataTypeO));

                        // End Loading... Animation
                        $('#divLoadingAnimation_Inner').empty();
                        $('#divLoadingAnimation').css("display", "none");
                    });

                    return false;
                }

    $(document).ready(function () {

        var DataTypeM = '@(ViewBag.DataTypeM)';
        var DataTypeS = '@(ViewBag.DataTypeS)';
        var DataTypeO = '@(ViewBag.DataTypeO)';


        if (DataTypeO != "R") {
            $('#dvAssociatedData').hide();
        }
        else {
            $('#dvAssociatedData').show();
        }

    });

        </script>
